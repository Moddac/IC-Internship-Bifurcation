"""
Used to plot the file Data.json generated with the MCMC method
"""
import json
import matplotlib.pyplot as plt
import numpy as np
import os

# # Parsing arguments
import argparse
parser = argparse.ArgumentParser(description="Plot data.json file generated by dimension reduction",
                                 formatter_class=argparse.ArgumentDefaultsHelpFormatter)
parser.add_argument("--path", help="path of the data file", required=True, nargs="*", type=str)
group = parser.add_mutually_exclusive_group(required=True)
group.add_argument("--beta", help="Plots according to beta", action="store_true")
group.add_argument("--sigma", help="Plots according to sigma", action="store_true")
parser.add_argument("--N_times", help="Number of time stamp to plot", choices=list(range(10)), default=1, type=int)
parser.add_argument("--save-fig", help="Save figure in a ./Figs directory", action="store_true")
parser.add_argument("--path-save", help="Path if fig is saved.", default="./Figs")
parser.add_argument("-n", "--name", help="Name of the file if fig is saved.", default="Fig")
args = parser.parse_args()

if __name__=="__main__":
    """
    File must be the same format as Data.json created in the checkFile function
    """

    # Creating directory if saving
    if args.save_fig and not os.path.exists(args.path_save):
        os.mkdir(args.path_save)


    for PATH in args.path:
        assert os.path.isfile(PATH), "File does not exist"

        # Opening file to retrieve data
        with open(PATH, "r") as file:
            data = json.load(file)

        param = data["parameters"]
        N, N_p, βs = param["N"], param["N_p"], param["betas"]

        data_points = data["data_points"]
        if args.N_times==1:
            indx = [9]
        else:
            indx = np.linspace(1, 9, args.N_times, endpoint=True, dtype=int) # Number of time stamps to plot
        σs = np.sqrt(2/np.array(βs))

        for i in indx:

            t = data_points[f"{βs[0]}"][i][0]
            M1s = [data_points[f"{β}"][i][1] for β in βs]
            
            if args.beta:
                plt.scatter(βs, M1s,
                            label=f"t={t}, file {PATH}")
            if args.sigma:
                plt.scatter(σs, M1s,
                            label=f"t={t}, file {PATH}")

    if args.beta:
        plt.xlabel("β")
    if args.sigma:
        plt.xlabel("σ")
    plt.ylabel("m")
    plt.legend()
    plt.title(f"Mean with MCMC method")
    if args.save_fig:
        plt.savefig(f"{args.path_save}/{args.name}.png")
    plt.show()
    plt.close()
