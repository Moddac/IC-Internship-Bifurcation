"""
Used to plot the file Data.json generated with the MCMC method
"""
import json
import matplotlib.pyplot as plt
import numpy as np
import os

# # Parsing arguments
import argparse
parser = argparse.ArgumentParser(description="Plot data.json file generated by dimension reduction",
                                 formatter_class=argparse.ArgumentDefaultsHelpFormatter)
parser.add_argument("--path", help="path of the data file", required=True)
parser.add_argument("--save-fig", help="Save figure in a ./Figs directory", action="store_true")
parser.add_argument("--path-save", help="Path if fig is saved.", default="./Figs")
parser.add_argument("-n", "--name", help="Name of the file if fig is saved.", default="Fig")
args = parser.parse_args()

if __name__=="__main__":
    """
    File must be the same format as Data.json created in the checkFile function
    """

    # Checking file exists and creating directory if saving
    assert os.path.isfile(args.path), "File does not exist"
    if args.save_fig and not os.path.exists(args.path_save):
        os.mkdir(args.path_save)
    PATH = args.path

    # Opening file to retrieve data
    with open(PATH, "r") as file:
        data = json.load(file)

    param = data["parameters"]
    N, N_p, βs = param["N"], param["N_p"], param["betas"]

    data_points = data["data_points"]
    ts = np.array(data_points[f"{βs[0]}"], dtype=int)[1:,0]

    σs = np.sqrt(2/np.array(βs))
    for (i, t) in enumerate(ts):
        M1s = [data_points[f"{β}"][i][1] for β in βs]
        
        plt.scatter(σs, M1s,
                    label=f"t={t}")

    plt.xlabel("β")
    plt.ylabel("m")
    plt.legend()
    plt.title(f"Mean with MCMC method")
    if args.save_fig:
        plt.savefig(f"{args.path_save}/{args.name}.png")
    plt.show()
    plt.close()
