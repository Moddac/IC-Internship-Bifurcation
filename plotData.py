"""
Used to plot the file Data.json generated with the dimension reduction method
"""
import json
import matplotlib.pyplot as plt
import numpy as np
import os

# Parsing arguments
import argparse
parser = argparse.ArgumentParser(description="Plot data.json file generated by dimension reduction",
                                 formatter_class=argparse.ArgumentDefaultsHelpFormatter)
parser.add_argument("--path", help="path of the data file", required=True)
parser.add_argument("--save-fig", help="Save figure in a ./Figs directory", action="store_true")
parser.add_argument("--path-save", help="Path if fig is saved.", default="./Figs")
parser.add_argument("-n", "--name", help="Name of the file if fig is saved.", default="Fig")
args = parser.parse_args()

if __name__=="__main__":

    # Checking file exists and creating directory if saving
    assert os.path.isfile(args.path), "File does not exist"
    if args.save_fig and not os.path.exists(args.path_save):
        os.mkdir(args.path_save)

    """
    File must be the same format as Data.json created in the checkFile function
    """
    # Opening file to retrieve data
    with open(args.path, "r") as file:
        data = json.load(file)

    param = data["parameters"]
    methods, Ns, σs = param["methods"], param["Ns"], param["sigmas"]
    σs = np.array(σs)

    for method in methods:
        for N in Ns:

            info = data[method][f"{N}"]
            M1s, time, success = info["points"], info["time"], info["success"]
            M1s = np.array(M1s)

            plt.scatter(σs[success], M1s[success],
                        label=f"N={N}, time={time}s")

        plt.xlabel("σ")
        plt.ylabel("m")
        plt.legend()
        plt.title(f"Mean with cumulant solving ODE with method '{method}'")
        if args.save_fig:
            plt.savefig(f"{args.path_save}/{args.name}_{method}.png")
        plt.show()
        plt.close()
