"""
Used to plot the file Data.json generated with the dimension reduction method
"""
import json
import matplotlib.pyplot as plt
import numpy as np
import os

# Parsing arguments
import argparse
parser = argparse.ArgumentParser(description="Plot data.json file generated by dimension reduction",
                                 formatter_class=argparse.ArgumentDefaultsHelpFormatter)
parser.add_argument("--path", help="path of the data file", required=True, nargs="*", type=str)
parser.add_argument("--save-fig", help="Save figure in a ./Figs directory", action="store_true")
parser.add_argument("--path-save", help="Path if fig is saved.", default="./Figs")
group = parser.add_mutually_exclusive_group(required=True)
group.add_argument("--beta", help="Plots according to beta", action="store_true")
group.add_argument("--sigma", help="Plots according to sigma", action="store_true")
parser.add_argument("-n", "--name", help="Name of the file if fig is saved.", default="Fig")
args = parser.parse_args()

if __name__=="__main__":
    """
    File must be the same format as Data.json created in the checkFile function
    """

    # Checking file exists and creating directory if saving
    if args.save_fig and not os.path.exists(args.path_save):
        os.mkdir(args.path_save)

    figs, axs = {}, {}    

    for PATH in args.path:

        assert os.path.isfile(PATH), "File does not exist"
        # Opening file to retrieve data
        with open(PATH, "r") as file:
            data = json.load(file)

        param = data["parameters"]
        methods, Ns, σs = param["methods"], param["Ns"], param["sigmas"]
        σs = np.array(σs)
        βs = 2 / (σs**2)

        for method in methods:
            
            if method not in axs.keys():
                figs[method], axs[method] = plt.subplots()
            fig, ax = figs[method], axs[method]

            for N in Ns:

                info = data[method][f"{N}"]
                M1s, time, success = info["points"], info["time"], info["success"]
                M1s = np.array(M1s)

                if args.sigma:
                    ax.scatter(σs[success], M1s[success],
                                label=f"N={N}, time={time}s, file {PATH}")
                if args.beta:
                    ax.scatter(βs[success], M1s[success],
                                label=f"N={N}, time={time}s, file {PATH}")
                    
            ax.set_xlabel("σ" if args.sigma else "β")
            ax.set_ylabel("m")
            ax.legend()
            ax.set_title(f"Mean with cumulant solving ODE with method '{method}'")

    plt.show()

    # TODO
    if args.save_fig:
        fig.savefig(f"{args.path_save}/{args.name}_{method}.png")
